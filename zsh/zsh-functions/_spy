#compdef spy

__projects() {
  _arguments $opts_help '*:: :->subcmds' && return 0

  local -a subcmds_project
  subcmds_project=( \
    'get-budget:Get project budget' \
    'get-data:Get project data' \
    'get-invoices:Get project invoices' \
    'info:Show information about project' \
    'print:Print project economic data' \
    'search:Search for project by name/number/manager/etc' \
    'tasks:Print time tasks in project' \
    )

  if (( CURRENT == 1 )); then
    _describe -t commands 'spy project / commands' subcmds_project
    return
  fi

  case "$words[1]" in
    get-data)
      opts=( \
        '(-p --project-number)'{-p,--project-number}'[The project number to work with]:project number:' \
        '(-s --start)'{-s,--start}'[Start date (default: Jan 1st)]:date:' \
        '(-e --end)'{-e,--end}'[End date (default: today)]:date:' \
        );;
    get-*)
      opts=( \
        '(-p --project-number)'{-p,--project-number}'[The project number to work with]:project number:' \
        );;
    info)
      opts=( \
        '(-p --project-number)'{-p,--project-number}'[The project number to work with]:project number:' \
        );;
    prin*)
      opts=( \
        '::csv/xlsx input file:_files -g "*.(csv|xls*)"' \
        '(-p --project-number)'{-p,--project-number}'[The project number to work with]:project number:' \
        '(-s --start)'{-s,--start}'[Start date (default: Jan 1st)]:date:' \
        '(-e --end)'{-e,--end}'[End date (default: today)]:date:' \
        '(-r --row)'{-r,--row}'[Set row content (default: task)]:row content:(week month year task employee none)' \
        '(-c --column)'{-c,--column}'[Columnate by time periods]:columnate by:(week month year task employee)' \
        '(-v --value)'{-v,--value}'[Specify type of value (default: billing)]:value type:(billing cost hours)' \
        '(-t --type)'{-t,--type}'[Specify which costs to include]:include:(all hours direct)' \
        '(-g --group-by)'{-g,--group-by}'[Group results by tasks or employees]:group by:(week month year task employee)' \
        '(-u --unit)'{-u,--unit}'[Unit for billing/cost]:unit:(kNOK NOK)' \
        );;
    search)
      opts=( \
        '(-p --project-number)'{-p,--project-number}'[Search by (part of) project number]:project number:' \
        '(-n --project-name)'{-n,--project-name}'[Search by (part of) project name]:project name:' \
        '(-m --project-manager)'{-m,--project-manager}'[Search by (part of) project manager]:project manager:' \
        '(-v --verbose)'{-v,--verbose}'[Show all tasks]' \
        );;
    tasks)
      opts=( \
        '(-p --project-number)'{-p,--project-number}'[The project number to work with]:project number:' \
        '(-v --verbose)'{-v,--verbose}'[Show all tasks]' \
        );;
  esac

  _arguments $opts $opts_common
}

__timesheet() {
  _arguments $opts_help '*:: :->subcmds' && return 0

  local -a subcmds_timesheet
  subcmds_timesheet=( \
    'get-data:Download timesheet data and save to file' \
    'print:Print collection of timeseets' \
    'show:Print timesheet for a single week' \
    )

  if (( CURRENT == 1 )); then
    _describe -t commands 'spy timesheets / commands' subcmds_timesheet
    return
  fi

  case "$words[1]" in
    get*)
      opts=( \
        '(-s --start)'{-s,--start}'[Start date (default: Jan 1)]:date:' \
        '(-e --end)'{-e,--end}'[End date (default: today)]:date:' \
        );;
    pr*)
      opts=( \
        '::csv input file:_files -g "*.csv"' \
        '(-s --start)'{-s,--start}'[Start date (default: first day of last month)]:date:' \
        '(-e --end)'{-e,--end}'[End date (default: last day of last month)]:date:' \
        '(-t --total)'{-t,--total}'[Show total sums]' \
        '(-w --weekly)'{-w,--weekly}'[Show weekly sums]' \
        '(-m --monthly)'{-m,--monthly}'[Show monthly sums]' \
        '(-v --verbose)'{-v,--verbose}'[Show more details]' \
        );;
    sh*)
      opts=( \
        '(-d --date)'{-d,--date}'[Show timesheet for week containing date (default: today)]:date:' \
        );;
  esac

  _arguments $opts $opts_common
}

_spy() {
  zstyle ":completion:*:*:spy:*" sort false

  local -a opts opts_help opts_common subcmds

  opts_help=( \
    '(-h --help)'{-h,--help}'[show help]' \
    )

  opts_common=( \
    $opts_help \
    '(-f)-f[Excel/CSV file for output]:filename:' \
    )

  _arguments $opts_help '*:: :->subcmds' && return 0

  subcmds=( \
    'project:Fetch and print project data' \
    'timesheet:Perform timesheet actions' \
    )

  if (( CURRENT == 1 )); then
    _describe -t commands 'spy / commands' subcmds
    return
  fi

  case "$words[1]" in
    pro*) __projects;;
    tim*) __timesheet;;
  esac
}

_spy "$@"
